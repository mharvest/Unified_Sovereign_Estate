generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AttestationEvent {
  id        String   @id @default(cuid())
  network   String
  program   String
  eventType String
  txHash    String
  blockTime DateTime
  payload   Json
  createdAt DateTime @default(now())
}

model Affidavit {
  id           String   @id @default(cuid())
  docType      String
  eyeionHash   String
  eklesiaHash  String
  safeVaultCid String
  issuer       String
  createdAt    DateTime @default(now())
}

model CustodyRecord {
  id           String   @id @default(cuid())
  assetId      String
  sha256       String   @unique
  cid          String?
  registeredAt DateTime?
  status       String   @default("pending")
  createdAt    DateTime @default(now())
}

model CustodyDoc {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  assetId   String
  name      String
  sha256    String   @unique
  status    String   @default("PENDING_SIGNATURE")
  createdAt DateTime @default(now())
}

model Issuance {
  id           String   @id @default(cuid())
  class        String
  underlyingId String
  notionalUSD  Decimal
  hrvstMinted  Decimal
  eklesiaHash  String?
  affidavitId  String?
  createdAt    DateTime   @default(now())
  pegMints     PegMint[]
}

model InsuranceBind {
  id            String   @id @default(cuid())
  assetId       String
  issuanceId    String?
  multiplierX   Decimal
  matriarchHash String?
  coverageClass String
  factorBps     Decimal
  createdAt     DateTime @default(now())
}

model PegMint {
  id          String   @id @default(cuid())
  issuanceId  String
  issuance    Issuance @relation(fields: [issuanceId], references: [id])
  hrvstAmount Decimal
  navAtMint   Decimal
  oracleSig   String
  createdAt   DateTime @default(now())
}

model Cycle {
  id         String   @id @default(cuid())
  program    String   @default("kiiantu")
  status     String   @default("ARMED")
  noteId     BigInt
  cycleId    String?  @unique
  tenorDays  Int
  rateBps    Int
  operator   String?
  txHash     String?
  armedAt    DateTime @default(now())
  executedAt DateTime?
  failedAt   DateTime?
  blockNumber BigInt?
  gasUsed     BigInt?
  gasPrice    BigInt?
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Override {
  id        String   @id @default(cuid())
  actor     String
  reason    String
  action    String
  target    String
  createdAt DateTime @default(now())
}

model AuditLog {
  id            Int      @id @default(autoincrement())
  action        String
  assetId       String
  attestationId String?
  txHash        String?
  payload       Json?
  createdAt     DateTime @default(now())
}

model SubscriberCursor {
  id        String   @id @default(cuid())
  name      String   @unique
  lastBlock BigInt   @default(0)
  updatedAt DateTime @updatedAt
}

model SignatureEnvelope {
  id          String   @id @default(cuid())
  envelopeId  String   @unique
  provider    String
  type        String
  assetId     String?
  status      String
  sha256      String
  signerEmail String?
  signedAt    DateTime?
  createdAt   DateTime @default(now())
  events      SignatureEvent[]
}

model SignatureEvent {
  id            String            @id @default(cuid())
  envelopeId    String
  providerEvent String
  eventType     String
  signer        String
  occurredAt    DateTime
  rawPayload    Json
  envelope      SignatureEnvelope @relation(fields: [envelopeId], references: [envelopeId])
}

model RequiredInput {
  key       String   @id
  value     String?
  category  String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model EvidenceTask {
  id        String   @id @default(cuid())
  key       String   @unique
  label     String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
