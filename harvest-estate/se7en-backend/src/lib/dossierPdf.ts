import PDFDocument from 'pdfkit';
import type { VerificationDossier } from './verification.js';

function formatTimestamp(timestamp: bigint): string {
  const millis = Number(timestamp) * 1000;
  if (!Number.isFinite(millis)) {
    return timestamp.toString();
  }
  return new Date(millis).toISOString();
}

export async function createDossierPdf(dossier: VerificationDossier): Promise<Buffer> {
  return new Promise<Buffer>((resolve, reject) => {
    const doc = new PDFDocument({ margin: 50, info: { Title: 'Harvest Estate Verification Dossier' } });
    const chunks: Buffer[] = [];

    doc.on('data', (chunk) => chunks.push(chunk as Buffer));
    doc.on('end', () => resolve(Buffer.concat(chunks)));
    doc.on('error', reject);

    doc.fontSize(18).text('Harvest Estate Verification Dossier', { underline: true });
    doc.moveDown();

    doc.fontSize(12).text(`Jurisdiction: ${dossier.attestation.jurisdiction}`);
    doc.text(`Attestation ID: ${dossier.attestation.id}`);
    doc.text(`Subject ID: ${dossier.attestation.subjectId}`);
    doc.text(`Clause: ${dossier.attestation.clause}`);
    doc.text(`Timestamp: ${formatTimestamp(dossier.attestation.timestamp)}`);
    doc.text(`Attestor: ${dossier.attestation.attestor}`);
    doc.text(`Payload Hash: ${dossier.attestation.payloadHash}`);
    doc.moveDown();

    doc.fontSize(14).text('SafeVault Documents', { underline: true });
    doc.moveDown(0.5);
    if (dossier.safeVault.docHashes.length === 0) {
      doc.fontSize(12).text('No SafeVault hashes recorded.');
    } else {
      dossier.safeVault.docHashes.forEach((hash) => {
        doc.fontSize(12).text(`â€¢ ${hash}`);
      });
    }
    doc.moveDown();

    doc.fontSize(14).text('Affidavit Snapshot', { underline: true });
    doc.moveDown(0.5);
    if (dossier.affidavit && typeof dossier.affidavit === 'object') {
      Object.entries(dossier.affidavit as Record<string, unknown>).forEach(([key, value]) => {
        doc.fontSize(12).text(`${key}: ${String(value)}`);
      });
    } else {
      doc.fontSize(12).text('No affidavit payload available.');
    }
    doc.moveDown();

    doc.fontSize(14).text('Audit Log (Latest)', { underline: true });
    doc.moveDown(0.5);
    if (dossier.audit && typeof dossier.audit === 'object') {
      Object.entries(dossier.audit as Record<string, unknown>).forEach(([key, value]) => {
        doc.fontSize(12).text(`${key}: ${String(value)}`);
      });
    } else {
      doc.fontSize(12).text('No audit record found for this attestation.');
    }

    doc.moveDown(1.5);
    doc.fontSize(10).fillColor('#666666');
    doc.text('Generated by Harvest Estate Sovereign Stack', { align: 'center' });

    doc.end();
  });
}
